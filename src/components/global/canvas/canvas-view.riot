

<canvas-view>
    <div class="CanvasView" onclick="{onClick}">
        <canvas>
            <p>Canvas Not Supported</p>
        </canvas>
    </div>
    <style>
    </style>
    <script>
      import StdComp from 'Framework/app-core/StdComp'
      const sc =  Object.assign({
        postStdOnMounted(props, state) {
          // measure and complete sizing
          this.app = this.cm.app
          let div = this.elementFind('div')
          this.canvas = div.firstChild
          this.setStyleProp(div, 'borderWidth', '1')
          this.setStyleProp(div, 'borderStyle', 'solid')
          this.setStyleProp(div, 'borderColor', 'black')
          let width = Number(this.getProp('width'))
          let height = Number(this.getProp('height'))
          let size = width || height
          const rect = this.getElementBounds(div)
          if(!size) {
            size = (rect.width || rect.height)
          }
          this.canvas.width = size;
          this.canvas.height = size;
          // note that for NS-side integration, the method name must be 'canvasReady'. But that's on that side, not here.
          let readyName = (this.getProp('ready') || 'canvasReady')
          let app = this.cm.getApp()
          setTimeout(() => {
             app.callCanvasReady(this) // this will call with an NS-looking 'event' argument.
          })
        },

        onClick(e) {
          console.log('onClick pressed')
          // call via binding context
          this.cm.getApp().callEventHandler('action', e)
        }

      }, StdComp)
      export default sc
    </script>
</canvas-view>
