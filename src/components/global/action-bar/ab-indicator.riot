<ab-indicator>
    <div class="tb-indicator { bound.className || '' }">
        <div style="vertical-align: middle; text-align: center">
            <div style="position:absolute;">
                <img if="{bound.icon}" src="{bound.icon}" style="position:absolute; left:-0.5rem; top:-0.5rem;">
                <span style="position:absolute; left:-0.4rem; top:-0.5rem;">{props.label}</span>
            </div>
        </div>
    </div>
    <style>
        .tb-indicator {
            border: 1px solid darkblue;
            border-radius:1rem;
            height: 1rem;
            width: 1rem;
            display: flex;
            margin:0.25rem;
            justify-content: center;
            align-items: center;
        }
    </style>
    <script>
      import {newCommon} from 'Framework/app-core/ComCommon'
      let cm;
      export default {
        onBeforeMount(props, state) {
          cm = newCommon(this)
          this.bound = Object.assign({}, props)
          delete this.bound.icons
          state.state = props.state
          // apply type
          if(props.type) {
            this.extension = cm.getApp().createExtensionType(props.type)
          }

        },
        onMounted(props, state) {
          // console.log(this.root.tagName, 'onBeforeMount', props, state)
          let div = this.$('div')
          div.style.cursor = 'auto'
          div.style.userSelect = 'none'
          div.style.pointerEvents = 'auto'
          // apply tooltip handling
          div.setAttribute('title', props.tooltip || props.label)
          if(this.extension) {
            // apply extension handling
            div.onmousedown = (e) => {
              let comp = cm.getComponent(e.srcElement)
              let prevent = this.extension.onPress(comp)
              if(prevent) {
                e.stopPropagation()
                e.preventDefault()
              }
            }
            div.onmouseup = (e) => {
              let comp = cm.getComponent(e.srcElement)
              this.extension.onRelease(comp)
            }
            this.extension.onSetToPage(this)
          }
          // bind to a state change on this component
          // and update and call this.extension.onStateChange(comp, comp.bound.state)
          cm.getCombinder().applyComponentBindings(this, "indicator-"+this.bound.id+".state", (comp,prop,value) =>{
            if(prop === 'state') { // sanity
              if(comp.extension) comp.extension.onStateChange(comp, value)
              comp.update({ state: value })
            }
          })
          this.onBeforeUpdate(props, state)
        },
        onBeforeUpdate(props, state) {
          // console.log(this.root.tagName, 'onBeforeUpdate', props, state)
          this.bound.state = state.state
          let div = this.$('div')
          // update dom attributes to match state
          let stateValue = div.dataset.state = state.state || 'default'
          this.bound.icon = props.icons && props.icons[stateValue] // pick the icon for the state
          // for compabilitity with {N} solution:
          // Sets a class name as a workaround for data attribute selector indicator-state-<state>
          let cn = div.className || ''
          let n = cn.indexOf('indicator-state')
          if(n !== -1) {
            let nn = cn.indexOf(' ', n)
            if(nn === -1) nn = cn.length
            cn = cn.substring(0, n) + cn.substring(nn)
          }
          cn = cn.trim()
          cn += ' indicator-state-'+ stateValue
          div.className = cn
          console.log('indicator '+this.bound.id+' class '+cn)
        },
        performAction(e) {
          let comp = cm.getComponent(e.srcElement)
          if(!comp.disabled) {
            cm.getApp().onToolAction(comp.props)
          }
        },
      }
    </script>
</ab-indicator>