<!-- this is the page-top title / menu / tool / indicator bar for riot.-->
<!-- brings in several helper subcomponents for individual pieces -->
<action-bar>
    <div class="title-bar">
        <ab-backbutton if="{!props.noBack}"/>
        <p if="{props.noBack}"/>
        <action-toolbar>
             <ab-toolbutton each="{item in state.tools}"
                            label="{item.label}"
                            id="{item.id}"
                            state="{item.state}"
                            className="{item.className}"
                            type="{item.type}"
                            tooltip="{item.tooltip}"
                            icons="{item.icons}"
                            />

        </action-toolbar>
        <action-menu if="{props.menuId}" menu-id="{props.menuId}"/>
        <p if="{!props.menuId}"/>
        <ab-title text="{props.text}"/>
        <indicator-bar>
            <ab-indicator each="{item in state.indicators}"
                           label="{item.label}"
                           id="{item.id}"
                           state="{item.state}"
                           className="{item.className}"
                           type="{item.type}"
                           tooltip="{item.tooltip}"
                           icons="{item.icons}"
            />

        </indicator-bar>
    </div>
    <script>
      import {newCommon} from 'Framework/app-core/ComCommon'
      import * as riot from 'riot'
      let cm;
      export default {
        onBeforeMount (props, state) {
          this.bound = new Object()
          cm = newCommon(this)
          // console.log(this.root.tagName, 'onBeforeMount', props, state, this.bound)
          // get the app (model) toolbar buttons and indicators
          try {
            // TO REFLECT "ONLY ONE" Change December '21
            let tbid = props.toolbarId || 'main'
            let idid = props.indicatorsId || 'main'

            state.tools = cm.getApp().model.getAtPath('toolbar.' + tbid)
            console.log('>state.tools populated from toolbar.'+tbid+' = ', state.tools)
            state.indicators = cm.getApp().model.getAtPath('indicators.' + idid)
            console.log('>state.indicators populated from indicators.'+idid+' = ', state.indicators)
          } catch(e) {
            console.error('@>toolbar & indicators populate:',e)
          }
        },
        onMounted (props, state) {
          // console.log(this.root.tagName, 'onMounted', props, state, this.bound)
          cm.bindComponent()
          cm.getApp().model.bind(this, 'environment', 'window', (comp, prop, value, old) => {
            // console.log('-------- see an update in size ------------', value)
            this.update(state)
          })
        },
        onBeforeUpdate (props, state) {
          // console.log(this.root.tagName, 'onBeforeUpdate', props, state, this.bound)
          const fullWidth = document.body.clientWidth
          // let el = this.$('.tool-bar')
          // if(!el) return
          // const tbWidth = el.getBoundingClientRect().width
          // el = this.$('.title')
          // if(!el) return
          // const ttWidth = el.getBoundingClientRect().width
          // const rat = tbWidth/ttWidth;
          // console.log(tbWidth, fullWidth, rat)
          // if(rat > 0.28) {
          if(fullWidth < 500) {
            document.body.classList.add('constrained')
          } else {
            document.body.classList.remove('constrained')
          }
          // console.log(document.body.className)
        },
        onUpdated (props, state) {
          // console.log(this.root.tagName, 'onUpdated', props, state, this.bound)
        },
        onBeforeUnmount (props, state) {
          // console.log(this.root.tagName, 'onBeforeUnmount', props, state, this.bound)
          this.bound = {}
        },
        onUnmounted (props, state) {
          // console.log(this.root.tagName, 'onUnmounted', props, state, this.bound)
        }
      }
    </script>
</action-bar>