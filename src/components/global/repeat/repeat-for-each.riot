<repeat-for-each>
    <div/>
    <script>
      const riot = require('riot')
      import StdComp from 'Framework/app-core/StdComp'
      const sc =  Object.assign({
        preStdOnMounted(props, state) {
          // console.log('>> repeat-for-each props', props)
          const refire = (comp, prop, value, old)  => {
            // console.warn('repeat-for-each bind change fires ', comp, prop, value, old)
            clearTimeout(this._once)
            this._once = setTimeout(() => {
              this.render(props)
            }, 100)
          }
          for(let p of Object.getOwnPropertyNames(props)) {
            let v = props[p]
            let ai = v.indexOf('@')
            let parts = []
            if(ai !== -1) {
              parts = v.substring(ai+1).split('.')
              // console.log('>> repeat-for-each binding change for ', parts)
              this.com.model.bind(this.riot, parts[0], parts[1], refire)
            }
          }
          this.render(props)
        },
        render(props) {
          this.childSlots = null; // turns out we need to regenerate each time.
          // console.log('RENDERING --- ')
          const vars = {}
          if (this.com) {
            Object.getOwnPropertyNames(props).forEach(p => {
              try {
                vars[p] = this.com.evaluateBindExpression(props[p], true).value
                this.com.bindComponent2(props)
              } catch (e) {}
            })
          }
          // clear all children / collect slot children
          if(!this.childSlots) {
            this.childSlots = []
            this.env = {}
            this.env.com = this.com
            this.env.vars = vars

            collectChildSlots(this.childSlots, 'root', this.slots, this.env)
          }
          // console.log('>> collected slots', this.childSlots)
          let parent = this.root.firstChild  // the initial div of all Jove Riot containers
          // style="user-select: none; display: flex; flex-flow: column nowrap; position: relative
          parent.style.display = 'flex'
          parent.style.flexFlow = 'column nowrap'
          parent.style.position = 'relative'
          const parentage = { root: parent }
          // clear all children
          parent.innerHTML = '';
          const subject = vars.subject
          const condition = vars.condition || 'true'
          const slots = this.childSlots
          if(slots) {
            for (let item of subject) {
              for (let c of slots) {
                let cname = c.name
                let cprops = Object.assign({},c.props)
                for(let p of Object.getOwnPropertyNames(cprops)) {
                  let ep = (cprops[p] || '').split(' ')
                  let pv = ''
                  for (let ev of ep) {
                    let v = ev
                    try { v = eval(ev) } catch (e) {}
                    if(typeof v === 'undefined') v = ''
                    pv += v + ' '
                  }
                  cprops[p] = pv.trim()
                }
                if(testCondition(condition, item, vars)) {
                  // console.log('>>> creating cc from ', cname, cprops)
                  let cc = document.createElement(cname)
                  let cmp = riot.mount(cc, cprops)[0]
                  let parent = parentage[c.parent]
                  parent.appendChild(cc)
                  parentage[c.name] = cc.firstChild
                }
              }
            }
          }
        }
      }, StdComp)

      function testCondition(expr, item, vars) {
        let rt = expr
        try { rt = com.evalInnerExpression(arg, vars) } catch (e) {
          rt = e.toString();
          // ok = false;
          console.error(e)
        }
        return !!rt // force boolean
      }

      // gather the slot child hierarchy
      function collectChildSlots(cslots, parent, slots, env) {
        if (slots) {
          let count = 0
            for (let sl of slots) {
              if(sl.html) {
                let cname = sl.html.substring(1).split(' ')[0]
                let bindings = sl.bindings || []
                let isContainer = false;
                for (let bc of bindings) {
                  cname = bc.evaluate()
                  if(bc.slots && bc.slots.length) isContainer = true;
                  const cprops = propsFromHtml(cname, ++count, sl.html)
                  if(bc.attributes) {
                    for (let a of bc.attributes) {
                      let {com,vars} = env;
                      const scope = {
                        b (arg) {
                          let ok = true;
                          let rt;
                          try { rt = com.evalInnerExpression(arg, vars) } catch (e) {
                            rt = e.toString();
                            ok = false;
                            console.error(e)
                          }
                          // if (ok) try { rt = eval(rt) } catch (e) {}
                          return rt
                        }
                      }
                      cprops[a.name] = a.evaluate(scope)
                    }
                  }
                  pushToHierarchy(cslots, { isContainer, parent, name: cname, props: cprops })
                }
                parent = cname;
              }
              if(sl.slots) {
                collectChildSlots(cslots, parent, sl.slots, env)
              }
              if (sl.bindings) {
                collectChildSlots(cslots, parent, sl.bindings, env)
              }
              if (sl.template && sl.template.bindingsData) {
                collectChildSlots(cslots, parent, sl.template.bindingsData, env)
              }
          }
        }
        // console.log('>> cslots for', parent, cslots)
        return cslots
      }
      function propsFromHtml(cname, count, html) {
        let props = {}
        let ti = 0
        while(count--) {
          ti = html.indexOf('</', ti+1)
        }
        ti = html.lastIndexOf('<'+cname, ti) +1

        html = html.substring(ti, html.indexOf('></'+cname, ti))
        const pts = html.split(' ')
        // stack-layout
        // expr13="expr13"
        // orientation="horizontal"
        let name = pts[0]
        for(let i=1; i< pts.length; i++) {
          let p = pts[i]
          let [key, value] = p.split('=')
          if(value.charAt(0) === '"') value = value.substring(1, value.length-1)
          if(key !== value) {
            props[key] = value
          }
        }
        return props
      }
      function pushToHierarchy(cslots, item) {
        const lastItem = cslots[cslots.length-1]
        if(( !lastItem && item.parent === 'root') // first entry from root
        || (item.parent === lastItem?.name)       // descendent child
        || (item.parent === lastItem?.parent)) { // sibling
          cslots.push(item)
        }
      }
      export default sc
    </script>

</repeat-for-each>