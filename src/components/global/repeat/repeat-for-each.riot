<repeat-for-each>
    <script>
      const riot = require('riot')
      import StdComp from 'Framework/app-core/StdComp'
      const sc =  Object.assign({
        preStdOnMounted(props, state) {
          this.childSlots = null;
          this.render(props)
          this.com.model.bind(this.riot, 'planet', 'fact', (comp, prop, value, old) => {
            console.warn('fact binding fires ', comp, prop, value, old)
            clearTimeout(this._once)
            this._once = setTimeout(() => {
                this.render(props)
            }, 100)

          })
        },
        render(props) {
          // console.log('RENDERING --- ')
          const vars = {}
          if (this.com) {
            Object.getOwnPropertyNames(props).forEach(p => {
              try {
                vars[p] = this.com.evaluateBindExpression(props[p], true).value
                this.com.bindComponent2(props)
              } catch (e) {}
            })
          }
          // clear all children / collect slot children
          if(!this.childSlots) {
            this.childSlots = []
            collectChildSlots(this.childSlots, 'root', this.slots)
          }
          console.log('>> collected slots', this.childSlots)
          // clear all children
          this.root.innerHTML = '';
          const subject = vars.subject
          const slots = this.childSlots
          if(slots) {
            for (let item of subject) {
              for (let c of slots) {
                let cname = c.name
                let cprops = Object.assign({},c.props)
                // let bindings = c.bindings
                // for (let bc of bindings) {
                //   for (let a of bc.attributes) {
                //     let com = this.com;
                //     const scope = {
                //       b (arg) {
                //         let ok= true;
                //         let rt;
                //         try { rt = com.evalInnerExpression(arg,vars) } catch(e) { rt = e.toString(); ok = false; console.error(e) }
                //         if(ok) try { rt = eval(rt) } catch(e) {}
                //         return rt
                //       }
                //     }
                //     cprops[a.name] = a.evaluate(scope)
                //   }
                // }
                console.log('>>> creating cc from ', cname, cprops)
                let cc = document.createElement(cname)
                let cmp = riot.mount(cc, cprops)[0]
                this.root.appendChild(cc)
              }
            }
          }
        }
      }, StdComp)

      // gather the slot child hierarchy
      function collectChildSlots(cslots, parent, slots) {
        if (slots) {
            for (let sl of slots) {
              if(sl.html) {
                const cname = sl.html.substring(1).split(' ')[0]
                const cprops = {}
                let bindings = sl.bindings || []
                for (let bc of bindings) {
                  for (let a of bc.attributes) {
                    let com = this.com;
                    const scope = {
                      b (arg) {
                        let ok= true;
                        let rt;
                        try { rt = com.evalInnerExpression(arg,vars) } catch(e) { rt = e.toString(); ok = false; console.error(e) }
                        if(ok) try { rt = eval(rt) } catch(e) {}
                        return rt
                      }
                    }
                    cprops[a.name] = a.evaluate(scope)
                  }
                }
                pushToHierarchy(cslots, { parent: parent, name: cname, props: cprops })
                parent = cname;
              }
              if(sl.slots) {
                collectChildSlots(cslots, parent, sl.slots)
              }
              if (sl.bindings) {
                collectChildSlots(cslots, parent, sl.bindings)
              }
              if (sl.template && sl.template.bindingsData) {
                collectChildSlots(cslots, parent, sl.template.bindingsData)
              }
          }
        }
        console.log('>> cslots for', parent, cslots)
        return cslots
      }
      function pushToHierarchy(cslots, item) {
        const lastItem = cslots[cslots.length-1]
        if(( !lastItem && item.parent === 'root') // first entry from root
        || (item.parent === lastItem?.name)       // descendent child
        || (item.parent === lastItem?.parent)) { // sibling
          cslots.push(item)
        }
      }
      export default sc
    </script>

</repeat-for-each>